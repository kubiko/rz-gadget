name: rz-g2l-ebk
summary: Renesas RZ/G2L Evaluation Board
description: |
 Support files for booting RZ/G2L Evaluation Board

version: 24-1
type: gadget

base: core24

platforms:
  arm64:
    build-on: [amd64, arm64]
    build-for: arm64

confinement: strict
grade: stable

parts:
  arm-trusted-firmware:
    plugin: nil
    source: https://github.com/renesas-rz/rzg_trusted-firmware-a.git
    source-type: git
    source-tag: v2.9/rz
    source-depth: 1
    build-environment:
      - MACHINE: "smarc-rzg2l"
      - PLAT: "g2l"
      - BOARD: "smarc_2"
      - BOARD_PMIC: "smarc_pmic_2"
      - CROSS_COMPILE: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
      - CC: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc"
    override-build: |
      make \
        PLAT=${PLAT} \
        BOARD=${BOARD} \
        BUILD_BASE=${CRAFT_PART_BUILD}/build \
        bl2 \
        bl31 \
        -j$(nproc)

      make clean
      make \
        PLAT=${PLAT} \
        BOARD=${BOARD_PMIC} \
        BUILD_BASE=${CRAFT_PART_BUILD}/build-pmic \
        bl2 \
        bl31 \
        -j$(nproc)

      install -D -m 0644 build/${PLAT}/release/bl2.bin ${CRAFT_PART_INSTALL}/blobs/bl2-${MACHINE}.bin
      install -D -m 0644 build/${PLAT}/release/bl31.bin ${CRAFT_PART_INSTALL}/blobs/bl31-${MACHINE}.bin
      install -D -m 0644 build-pmic/${PLAT}/release/bl2.bin ${CRAFT_PART_INSTALL}/blobs/bl2-${MACHINE}_pmic.bin
      install -D -m 0644 build-pmic/${PLAT}/release/bl31.bin ${CRAFT_PART_INSTALL}/blobs/bl31-${MACHINE}_pmic.bin
    prime:
      - -*

  pub-signing-key:
    plugin: dump
    source: https://git.launchpad.net/~ondrak/+git/dev-keys
    source-type: git
    source-branch: master
    stage:
      - u-boot-pubkey.dtsi
    prime:
      - -*

  flash-script: # uuu flash script
    plugin: nil
    override-build: |
      # get seed offset and size from gadget yaml
      convert_size() {
      case $1 in
        (0)  seed_size="0" ;;
        (*G | *g) echo $(expr $(echo $1 | sed -e 's/G//g' -e 's/g//g') \* 1024 \* 1024 \* 1024) ;;
        (*M | *m) echo $(expr $(echo $1 | sed -e 's/M//g' -e 's/m//g') \* 1024 \* 1024) ;;
        (*K | *k) echo $(expr $(echo $1 | sed -e 's/K//g' -e 's/k//g') \* 1024) ;;
        (*) echo ${1} ;;
      esac
      }

      # avoid confinement for yq as we might run as root
      yq="/snap/yq/current/bin/yq"
      # read all the partitions before ubuntu-boot and include those in the created part table
      # additionally calculate part number for seed and boot, we need those for u-boot build
      gpt_partitions="uuid_disk=\\\${uuid_gpt_disk}"
      part_number=0
      # this is good opportunity to validate offset of the partitions, if defined
      # it saves us from failed boot
      # default 1st partition offset is 1MB, unless defined otherwise
      partition_offset=0
      unset mmc_boot_part mmc_seed_part
      for p in $(${yq} eval '.volumes.[].structure.[].name' ${CRAFT_PROJECT_DIR}/gadget.yaml)
      do
      # ignore bare structures
      if [ "${p}" != "null" ]; then
        part_number=$((part_number+1))
        # only read till ubuntu-boot partition
        if [ "${p}" == "ubuntu-boot" ]; then
          mmc_boot_part="${part_number}"
        fi
        if [ "${p}" == "ubuntu-seed" ]; then
          mmc_seed_part="${part_number}"
        fi

        # include partitions in the list
        export p=${p}
        p_offset=$(${yq} eval '.volumes.[].structure.[] | select(.name == env(p)) | .offset' ${CRAFT_PROJECT_DIR}/gadget.yaml)
        p_size=$(${yq} eval '.volumes.[].structure.[] | select(.name == env(p)) | .size' ${CRAFT_PROJECT_DIR}/gadget.yaml)
        p_type=$(${yq} eval '.volumes.[].structure.[] | select(.name == env(p)) | .type' ${CRAFT_PROJECT_DIR}/gadget.yaml)
        p_size=$(convert_size ${p_size})
        if [ "${partition_offset}" == "0" ]; then
          # first partion, if there no offset defined, use default 1MB (1048576)
          if [ -n "${p_offset}" ] && [ "${p_offset}" != "null" ]; then
            partition_offset=${p_offset}
          else
            partition_offset=1048576
          fi
        fi
        gpt_partitions="${gpt_partitions}\;name=${p},size=${p_size},start=${partition_offset},type=${p_type}"
        if [ "${p_offset}" != "${partition_offset}" ]; then
          echo "WARNING: Unexpected offset for partition ${p}, defined: ${p_offset}, expected: ${partition_offset}"
        else
          echo "Validated offset for partition ${p}, offset: ${p_offset}"
        fi
        # calculate next offset
        partition_offset=$((partition_offset+p_size))
        unset p
      fi
      done

      cat << EOF > flash-uc.sh
      #/bin/sh

      fb_dev=""
      fb_dev="\${1}"

      # use fastboot to provision the device
      fastboot \${fb_dev} oem run:'setenv fastboot_dev mmc'
      fastboot \${fb_dev} oem run:'setenv mmcdev \${mmcdev}'
      fastboot \${fb_dev} oem run:'mmc dev \${mmcdev}'
      # create new partition table
      # boot critical partition number (used for u-boot build config)
      # mmc_boot_part=${mmc_boot_part}
      # mmc_seed_part=${mmc_seed_part}
      fastboot \${fb_dev} oem run:setenv partitions '${gpt_partitions}'
      fastboot \${fb_dev} oem format

      # force re-read partition table
      fastboot \${fb_dev} oem run:'setenv mmcdev \${mmcdev}'
      fastboot \${fb_dev} oem run:'setenv fastboot_dev mmc'

      # Flashing partitions, use timeout 20s
      echo "If ubuntu-seed partition does not exist, powercycle the device"
      fastboot \${fb_dev} flash ubuntu-seed ubuntu-seed.img
      EOF
      install -D -m 755 flash-uc.sh ${CRAFT_PART_INSTALL}/blobs/flash-uc.sh

build-snaps:
  - yq

build-packages:
  - arm-trusted-firmware-tools
  - bison
  - build-essential
  - device-tree-compiler
  - flex
  - libxml2-dev
  - libssl-dev
  - pkgconf
  - python3
  - python3-cryptography
  - python3-pyelftools
  - python3-pycryptodome
  - wget
  - zlib1g-dev
  - on amd64:
    - gcc-aarch64-linux-gnu
    - uuid-dev:arm64
  - on arm64:
    - gcc
    - uuid-dev
