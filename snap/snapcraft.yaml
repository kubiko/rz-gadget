name: rz-g2l-ebk
summary: Renesas RZ/G2L Evaluation Board
description: |
 Support files for booting RZ/G2L Evaluation Board

version: 24-1
type: gadget

base: core24

platforms:
  arm64:
    build-on: [amd64, arm64]
    build-for: arm64

confinement: strict
grade: stable

environment:
  LD_LIBRARY_PATH: ${SNAP}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
  PATH: ${SNAP}/bin:${PATH}

apps:
  tee-supplicant:
    command: usr/sbin/tee-supplicant --fs-parent-path $SNAP_SAVE_DATA/optee-fs --ta-path $SNAP_COMMON/lib/optee_armtz --plugin-path $SNAP_COMMON/usr/lib/tee-supplicant/plugins
    install-mode: disable
    daemon: simple
    plugs:
      - network-bind
      - tee

parts:
  arm-trusted-firmware:
    plugin: nil
    source: https://github.com/renesas-rz/rzg_trusted-firmware-a.git
    source-type: git
    source-tag: v2.9/rz
    source-depth: 1
    build-environment:
      - MACHINE: "smarc-rzg2l"
      - PLAT: "g2l"
      - BOARD: "smarc_2"
      - BOARD_PMIC: "smarc_pmic_2"
      - CROSS_COMPILE: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
      - CC: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc"
    override-build: |
      make \
        PLAT=${PLAT} \
        BOARD=${BOARD} \
        BUILD_BASE=${CRAFT_PART_BUILD}/build \
        bl2 \
        bl31 \
        -j$(nproc)

      make clean
      make \
        PLAT=${PLAT} \
        BOARD=${BOARD_PMIC} \
        BUILD_BASE=${CRAFT_PART_BUILD}/build-pmic \
        bl2 \
        bl31 \
        SPD=opteed \
        -j$(nproc)

      install -D -m 0644 build/${PLAT}/release/bl2.bin ${CRAFT_PART_INSTALL}/blobs/bl2-${MACHINE}.bin
      install -D -m 0644 build/${PLAT}/release/bl31.bin ${CRAFT_PART_INSTALL}/blobs/bl31-${MACHINE}.bin
      install -D -m 0644 build-pmic/${PLAT}/release/bl2.bin ${CRAFT_PART_INSTALL}/blobs/bl2-${MACHINE}_pmic.bin
      install -D -m 0644 build-pmic/${PLAT}/release/bl31.bin ${CRAFT_PART_INSTALL}/blobs/bl31-${MACHINE}_pmic.bin
    prime:
      - -*

  optee-keys:
    plugin: dump
    source: https://git.launchpad.net/~ondrak/+git/dev-keys
    source-type: git
    source-branch: ta-keys
    organize:
      '*': ta-keys/
    prime:
      - -*

  optee-fde:
    plugin: dump
    source: https://git.launchpad.net/~ondrak/+git/optee-uc-fde
    source-type: git
    source-branch: master
    organize:
      '*': optee-fde/
    prime:
      - -*

  optee-os:
    after:
      - optee-fde
      - optee-keys
    plugin: nil
    source: https://github.com/renesas-rz/rzg_optee-os.git
    source-type: git
    source-tag: 3.19.0/rz
    source-depth: 1
    build-environment:
      - MACHINE: "smarc-rzg2l"
      - ARCH: "arm"
      - CROSS_COMPILE: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
      - CROSS_COMPILE_core: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
      - CROSS_COMPILE_ta_arm64: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
      - CFG_ARM64_core: "y"
      - CFG_USER_TA_TARGETS: "ta_arm64"
      - CFG_REE_FS: "y"
      - CFG_RPMB_FS: "n"
      - CFG_CRYPTO_WITH_CE: "n"
      - CFG_TEE_RAM_VA_SIZE: "0x00280000"
      - CFG_CORE_HEAP_SIZE: "0x00100000"
      - TA_PUBLIC_KEY: "${CRAFT_STAGE}/ta-keys/ta_public.pem"
      - PLATFORM: "rz"
      - PLATFORM_FLAVOR: "g2l_smarc_2"
      - CFG_RZ_SCE: "n"
      - PYTHON: "/usr/bin/python3"
      - PYTHONHOME: "/usr"
      - PYTHONPATH: "/usr/lib/python3.12:/usr/lib/python3.12/lib-dynload:/usr/lib/python3/dist-packages"
      - PYTHONIOENCODING: utf-8
    override-build: |
      # add optee-fde TA
      cp -r ${CRAFT_STAGE}/optee-fde/ta/fde_key_handler ${CRAFT_PART_BUILD}/ta/
      export OPTEE_VERSION=$(head -1 CHANGELOG.md  | sed 's/# OP-TEE - version \(.*\) (.*/\1/g')-imx
      make O=${CRAFT_PART_BUILD}/out -j$(nproc)
      # build again with early TAs
      make O=${CRAFT_PART_BUILD}/out -j$(nproc) \
         CFG_EARLY_TA=y \
         EARLY_TA_PATHS="out/ta/pkcs11/fd02c9da-306c-48c7-a49c-bbd827ae86ee.stripped.elf \
                 out/ta/fde_key_handler/fd1b2a86-3668-11eb-adc1-0242ac120002.stripped.elf"

      install -D -m 0644 ${CRAFT_PART_BUILD}/out/core/tee.elf \
                         ${CRAFT_PART_INSTALL}/blobs/tee-${MACHINE}.elf
      install -D -m 0644 ${CRAFT_PART_BUILD}/out/core/tee-raw.bin \
                         ${CRAFT_PART_INSTALL}/blobs/tee-${MACHINE}.bin
    prime:
      - -*

  optee-client:
    plugin: make
    source: https://github.com/OP-TEE/optee_client.git
    source-type: git
    source-tag: 3.19.0
    source-depth: 1
    make-parameters:
      - ARCH="arm64"
      - DEBUG=0
      - CROSS_COMPILE="${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
      - CFG_TEE_CLIENT_LOAD_PATH="/"
      - CFG_TA_TEST_PATH=n
      - CFG_TEE_SUPP_LOG_LEVEL=0
      - SBINDIR=/usr/sbin
      - LIBDIR=/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}
      - PKG_CONFIG=pkg-config
    stage:
      - usr/sbin
      - usr/lib/*/lib*so*

  pub-signing-key:
    plugin: dump
    source: https://git.launchpad.net/~ondrak/+git/dev-keys
    source-type: git
    source-branch: master
    stage:
      - u-boot-pubkey.dtsi
    prime:
      - -*

  u-boot:
    after:
      - pub-signing-key
      - flash-script
    plugin: nil
    source: https://git.launchpad.net/~ondrak/+git/u-boot
    source-type: git
    source-tag: v2023.10/rz-asr
    source-depth: 1
    build-environment:
      - MACHINE: "smarc-rzg2l"
      - CROSS_COMPILE: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
      - CC: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-gcc"
    override-build: |
      # copy in place dtsi with pub part of kernel signing key
      cp ${CRAFT_STAGE}/u-boot-pubkey.dtsi \
         ${CRAFT_PART_BUILD}/arch/arm/dts/u-boot-pubkey.dtsi
      # update mmc_seed_part and mmc_boot_part from flash-uc.sh
      mmc_seed_part="$(grep mmc_seed_part ${CRAFT_STAGE}/blobs/flash-uc.sh | sed -e 's/^# //')"
      mmc_boot_part="$(grep mmc_boot_part ${CRAFT_STAGE}/blobs/flash-uc.sh | sed -e 's/^# //')"
      sed -i \
         -e 's/mmc_seed_part=\(.*\)\\0"/'"${mmc_seed_part}"'\\0"/g' \
         -e 's/mmc_boot_part=\(.*\)\\0"/'"${mmc_boot_part}"'\\0"/g' \
         ${CRAFT_PART_BUILD}/include/configs/smarc-rzg2l.h
      # enable dangerous mode
      sed -i \
         -e 's/#define UC_EXTRA_BOOTARGS.*/#define UC_EXTRA_BOOTARGS "dangerous "/g' \
         ${CRAFT_PART_BUILD}/include/configs/smarc-rzg2l.h
      # Add GIT revision to the local version
      head=$(git rev-parse --verify --short HEAD 2> /dev/null)
      version=$(make ubootversion)
      printf "%s%s%s%s" "-${version}" "-rz" "+g" "${head}" > .scmversion
      make smarc-rzg2l_defconfig
      make -j$(nproc)
      tools/mkenvimage -r -s 4096 -o ${CRAFT_PART_INSTALL}/boot.sel - < /dev/null
      touch ${CRAFT_PART_INSTALL}/uboot.conf
      install -D -m 644 u-boot.bin ${CRAFT_PART_INSTALL}/blobs/u-boot.bin
    prime:
      - boot.sel
      - uboot.conf

  fip-images:
    after:
      - arm-trusted-firmware
      - optee-os
      - u-boot
    plugin: nil
    source-depth: 1
    build-environment:
      - MACHINE: "smarc-rzg2l"
    override-pull: |
      curl \
        --silent \
        --output bootparameter.c \
        https://raw.githubusercontent.com/renesas-rz/meta-renesas/refs/heads/dunfell/rz/meta-rz-common/recipes-bsp/firmware-pack/bootparameter/bootparameter.c
    override-build: |
      gcc bootparameter.c -o bootparameter
      # Create bl2_bp.bin
      ./bootparameter ${CRAFT_STAGE}/blobs/boot/bl2-${MACHINE}.bin bl2_bp.bin

      # build pmic images
      # Create bl2_bp_pmic.bin
      ./bootparameter ${CRAFT_STAGE}/blobs/bl2-${MACHINE}_pmic.bin bl2_bp_pmic.bin
      # Add for eSD boot image
      cp bl2_bp_pmic.bin bl2_bp_esd_pmic.bin

      cat ${CRAFT_STAGE}/blobs/bl2-${MACHINE}_pmic.bin >> bl2_bp_pmic.bin

      # Create fip.bin
      fiptool create --align 16 \
                  --soc-fw ${CRAFT_STAGE}/blobs/bl31-${MACHINE}_pmic.bin \
                  --nt-fw ${CRAFT_STAGE}/blobs/u-boot.bin fip_pmic.bin

      # Convert to srec
      objcopy -O srec --adjust-vma=0x00011E00 --srec-forceS3 -I binary bl2_bp_pmic.bin bl2_bp_pmic.srec

      # add tee
      fiptool update --align 16 --tos-fw ${CRAFT_STAGE}/blobs/tee-${MACHINE}.bin fip_pmic.bin
      objcopy -I binary -O srec --adjust-vma=0x0000 --srec-forceS3 fip_pmic.bin fip_pmic.srec

      # Install fip images
      install -D -m 0644 ${CRAFT_PART_BUILD}/bl2_bp_pmic.srec \
                         ${CRAFT_PART_INSTALL}/blobs/bl2_bp-${MACHINE}_pmic.srec
      install -D -m 0644 ${CRAFT_PART_BUILD}/fip_pmic.srec \
                         ${CRAFT_PART_INSTALL}/blobs/fip-${MACHINE}_pmic.srec

  flash-writter:
    plugin: nil
    source: https://github.com/renesas-rz/rzg2_flash_writer.git
    source-branch: rz_g2l
    build-environment:
      - MACHINE: "smarc-rzg2l"
      - BOARD: "RZG2L_SMARC_PMIC"
      - CROSS_COMPILE: "aarch64-linux-gnu-"
    override-build: |
      make BOARD=${BOARD} -j1
      install -m 644 -D AArch64_output/*.mot ${CRAFT_PART_INSTALL}/blobs/Flash_Writer_SCIF_RZG2L_SMARC_DDR4_2GB.mot

  flash-script: # uuu flash script
    plugin: nil
    override-build: |
      # get seed offset and size from gadget yaml
      convert_size() {
      case $1 in
        (0)  seed_size="0" ;;
        (*G | *g) echo $(expr $(echo $1 | sed -e 's/G//g' -e 's/g//g') \* 1024 \* 1024 \* 1024) ;;
        (*M | *m) echo $(expr $(echo $1 | sed -e 's/M//g' -e 's/m//g') \* 1024 \* 1024) ;;
        (*K | *k) echo $(expr $(echo $1 | sed -e 's/K//g' -e 's/k//g') \* 1024) ;;
        (*) echo ${1} ;;
      esac
      }

      # avoid confinement for yq as we might run as root
      yq="/snap/yq/current/bin/yq"
      # read all the partitions before ubuntu-boot and include those in the created part table
      # additionally calculate part number for seed and boot, we need those for u-boot build
      gpt_partitions="uuid_disk=\\\${uuid_gpt_disk}"
      part_number=0
      # this is good opportunity to validate offset of the partitions, if defined
      # it saves us from failed boot
      # default 1st partition offset is 1MB, unless defined otherwise
      partition_offset=0
      unset mmc_boot_part mmc_seed_part
      for p in $(${yq} eval '.volumes.[].structure.[].name' ${CRAFT_PROJECT_DIR}/gadget.yaml)
      do
      # ignore bare structures
      if [ "${p}" != "null" ]; then
        part_number=$((part_number+1))
        # only read till ubuntu-boot partition
        if [ "${p}" == "ubuntu-boot" ]; then
          mmc_boot_part="${part_number}"
        fi
        if [ "${p}" == "ubuntu-seed" ]; then
          mmc_seed_part="${part_number}"
        fi

        # include partitions in the list
        export p=${p}
        p_offset=$(${yq} eval '.volumes.[].structure.[] | select(.name == env(p)) | .offset' ${CRAFT_PROJECT_DIR}/gadget.yaml)
        p_size=$(${yq} eval '.volumes.[].structure.[] | select(.name == env(p)) | .size' ${CRAFT_PROJECT_DIR}/gadget.yaml)
        p_type=$(${yq} eval '.volumes.[].structure.[] | select(.name == env(p)) | .type' ${CRAFT_PROJECT_DIR}/gadget.yaml)
        p_size=$(convert_size ${p_size})
        if [ "${partition_offset}" == "0" ]; then
          # first partion, if there no offset defined, use default 1MB (1048576)
          if [ -n "${p_offset}" ] && [ "${p_offset}" != "null" ]; then
            partition_offset=${p_offset}
          else
            partition_offset=1048576
          fi
        fi
        gpt_partitions="${gpt_partitions}\;name=${p},size=${p_size},start=${partition_offset},type=${p_type}"
        if [ "${p_offset}" != "${partition_offset}" ]; then
          echo "WARNING: Unexpected offset for partition ${p}, defined: ${p_offset}, expected: ${partition_offset}"
        else
          echo "Validated offset for partition ${p}, offset: ${p_offset}"
        fi
        # calculate next offset
        partition_offset=$((partition_offset+p_size))
        unset p
      fi
      done

      cat << EOF > flash-uc.sh
      #/bin/sh

      fb_dev=""
      fb_dev="\${1}"

      # use fastboot to provision the device
      fastboot \${fb_dev} oem run:'setenv fastboot_dev mmc'
      fastboot \${fb_dev} oem run:'setenv mmcdev \${mmcdev}'
      fastboot \${fb_dev} oem run:'mmc dev \${mmcdev}'
      # create new partition table
      # boot critical partition number (used for u-boot build config)
      # mmc_boot_part=${mmc_boot_part}
      # mmc_seed_part=${mmc_seed_part}
      fastboot \${fb_dev} oem run:setenv partitions '${gpt_partitions}'
      fastboot \${fb_dev} oem format

      # force re-read partition table
      fastboot \${fb_dev} oem run:'setenv mmcdev \${mmcdev}'
      fastboot \${fb_dev} oem run:'setenv fastboot_dev mmc'

      # Flashing partitions, use timeout 20s
      echo "If ubuntu-seed partition does not exist, powercycle the device"
      fastboot \${fb_dev} flash ubuntu-seed ubuntu-seed.img
      EOF
      install -D -m 755 flash-uc.sh ${CRAFT_PART_INSTALL}/blobs/flash-uc.sh

build-snaps:
  - yq

build-packages:
  - arm-trusted-firmware-tools
  - bison
  - build-essential
  - device-tree-compiler
  - flex
  - libxml2-dev
  - libssl-dev
  - pkgconf
  - python3
  - python3-cryptography
  - python3-pyelftools
  - python3-pycryptodome
  - wget
  - zlib1g-dev
  - on amd64:
    - gcc-aarch64-linux-gnu
    - uuid-dev:arm64
  - on arm64:
    - gcc
    - uuid-dev

slots:
  tee-plugins:
    interface: content
    write:
      - $SNAP_COMMON/usr/lib/tee-supplicant/plugins
  tee-tas:
    interface: content
    write:
      - $SNAP_COMMON/lib/optee_armtz
